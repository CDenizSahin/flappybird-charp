@page "/"
@using Microsoft.AspNetCore.Components.Web
@using System.Timers

<PageTitle>FlappyBird C# Web</PageTitle>

<div class="game-container">
    <canvas @ref="gameCanvas" 
            @onkeydown="OnKeyDown" 
            @onkeyup="OnKeyUp"
            tabindex="0"
            style="outline: none; background: @GetBackgroundGradient()">
    </canvas>
    
    <div class="game-ui">
        <div class="score">Skor: @score</div>
        @if (!isGameStarted)
        {
            <div class="start-message">
                <h2>FlappyBird C# Web</h2>
                <p>Boşluk tuşuna basarak başlayın!</p>
            </div>
        }
        @if (isGameOver)
        {
            <div class="game-over">
                <h2>Oyun Bitti!</h2>
                <p>Skor: @score</p>
                <button @onclick="RestartGame" class="restart-btn">Yeniden Başla</button>
            </div>
        }
    </div>
</div>

@code {
    private ElementReference gameCanvas;
    private int score = 0;
    private bool isGameStarted = false;
    private bool isGameOver = false;
    private int themeIndex = 0;
    private Timer gameTimer;
    private Random random = new Random();
    
    // Bird properties
    private float birdX = 120f;
    private float birdY = 240f;
    private float birdVelocityY = 0f;
    private const float Gravity = 0.5f;
    private const float FlapImpulse = -8.5f;
    private const int BirdSize = 32;
    
    // Pipes
    private List<Rectangle> pipes = new List<Rectangle>();
    private int framesSinceLastPipe = 0;
    private const int PipeSpawnFrames = 90;
    private const int PipeWidth = 70;
    private const int PipeGapMin = 130;
    private const int PipeGapMax = 180;
    private const int PipeSpeed = 3;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gameCanvas.FocusAsync();
            SetupGame();
        }
    }
    
    private void SetupGame()
    {
        gameTimer = new Timer(16); // ~60 FPS
        gameTimer.Elapsed += OnGameTick;
    }
    
    private void OnGameTick(object sender, ElapsedEventArgs e)
    {
        if (!isGameStarted || isGameOver) return;
        
        // Physics
        birdVelocityY += Gravity;
        birdY += birdVelocityY;
        
        // Pipe spawning
        framesSinceLastPipe++;
        if (framesSinceLastPipe >= PipeSpawnFrames)
        {
            framesSinceLastPipe = 0;
            SpawnPipePair();
        }
        
        // Move pipes
        for (int i = 0; i < pipes.Count; i++)
        {
            var pipe = pipes[i];
            pipe.X -= PipeSpeed;
            pipes[i] = pipe;
        }
        pipes.RemoveAll(p => p.Right < 0);
        
        // Scoring
        Rectangle birdRect = new Rectangle((int)birdX, (int)birdY, BirdSize, BirdSize);
        for (int i = 0; i < pipes.Count; i += 2)
        {
            if (i + 1 >= pipes.Count) break;
            Rectangle bottom = pipes[i + 1];
            if (bottom.Right < birdRect.Left && bottom.Right + PipeSpeed >= birdRect.Left)
            {
                score++;
                themeIndex = (themeIndex + 1) % 4;
            }
        }
        
        // Collision
        if (birdY < 0 || birdY + BirdSize > 600)
        {
            GameOver();
        }
        
        foreach (var pipe in pipes)
        {
            if (pipe.IntersectsWith(birdRect))
            {
                GameOver();
                break;
            }
        }
        
        StateHasChanged();
    }
    
    private void SpawnPipePair()
    {
        int height = 600;
        int gap = random.Next(PipeGapMin, PipeGapMax + 1);
        int topHeight = random.Next(30, height - gap - 30);
        
        int x = 800;
        Rectangle topPipe = new Rectangle(x, 0, PipeWidth, topHeight);
        Rectangle bottomPipe = new Rectangle(x, topHeight + gap, PipeWidth, height - (topHeight + gap));
        
        pipes.Add(topPipe);
        pipes.Add(bottomPipe);
    }
    
    private void GameOver()
    {
        isGameOver = true;
        isGameStarted = false;
        gameTimer?.Stop();
    }
    
    private void RestartGame()
    {
        score = 0;
        themeIndex = 0;
        isGameOver = false;
        isGameStarted = false;
        birdX = 120f;
        birdY = 240f;
        birdVelocityY = 0f;
        pipes.Clear();
        framesSinceLastPipe = PipeSpawnFrames;
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == " ")
        {
            if (isGameOver)
            {
                RestartGame();
                return;
            }
            
            if (!isGameStarted)
            {
                isGameStarted = true;
                gameTimer?.Start();
            }
            
            birdVelocityY = FlapImpulse;
        }
    }
    
    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        // Handle key up if needed
    }
    
    private string GetBackgroundGradient()
    {
        return themeIndex switch
        {
            0 => "linear-gradient(135deg, #87CEEB, #98FB98)", // Day
            1 => "linear-gradient(135deg, #FF6347, #FFD700)", // Sunset
            2 => "linear-gradient(135deg, #191970, #483D8B)", // Night
            _ => "linear-gradient(135deg, #9370DB, #FFB6C1)" // Dawn
        };
    }
    
    public void Dispose()
    {
        gameTimer?.Dispose();
    }
}

<style>
.game-container {
    position: relative;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
}

canvas {
    width: 100%;
    height: 100%;
    display: block;
}

.game-ui {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
}

.score {
    position: absolute;
    top: 20px;
    left: 20px;
    color: white;
    font-size: 24px;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

.start-message, .game-over {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: white;
    background: rgba(0,0,0,0.7);
    padding: 30px;
    border-radius: 10px;
    pointer-events: auto;
}

.restart-btn {
    background: #4CAF50;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 10px;
}

.restart-btn:hover {
    background: #45a049;
}
</style>
